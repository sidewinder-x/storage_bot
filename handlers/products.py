from aiogram import Router, types, F
from aiogram.types import CallbackQuery
from keyboards.product_kb import get_stock_menu_kb
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from states.product_states import AddProductStates
from database import get_db
from keyboards.menu import get_main_menu_kb
from states.product_states import PurchaseProductStates
from states.product_states import SellProductStates
from datetime import datetime
router = Router()

async def save_product_and_finish(message: Message, state: FSMContext):
    data = await state.get_data()

    conn = get_db()
    cur = conn.cursor()
    cur.execute(
        "INSERT INTO products (name, quantity, buy_price, sell_price, photo) VALUES (?, ?, ?, ?, ?)",
        (data["name"], data["quantity"], data["buy_price"], data["sell_price"], data.get("photo"))
    )
    conn.commit()
    conn.close()

    await message.answer(
        f"‚úÖ –¢–æ–≤–∞—Ä <b>{data['name']}</b> –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–∫–ª–∞–¥!",
        reply_markup=get_main_menu_kb(),
        parse_mode="HTML"
    )
    await state.clear()

@router.callback_query(F.data == "menu_stock")
async def stock_menu(callback: CallbackQuery):
    await callback.message.edit_text(
        "üì¶*–°–∫–ª–∞–¥*\n\n"
        "–£–ø—Ä–∞–≤–ª—è–π —Å–≤–æ–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏ –≤ —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ:",
        reply_markup=get_stock_menu_kb(),
        parse_mode = "Markdown"
    )

@router.callback_query(F.data == "stock_back")
async def stock_back(callback: CallbackQuery):
    from keyboards.menu import get_main_menu_kb
    await callback.message.edit_text(
        "*ü§ñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n"
        "üì¶ **–°–∫–ª–∞–¥** ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏ –∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏\n"
        "üí∞ **–§–∏–Ω–∞–Ω—Å—ã** ‚Äî —É—á—ë—Ç –≤—ã—Ä—É—á–∫–∏, –ø—Ä–∏–±—ã–ª–∏ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤\n"
        "üöö **–ö—É—Ä—å–µ—Ä—ã** ‚Äî –∑–∞–¥–∞–Ω–∏—è –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å\n"
        "üìä **–û—Ç—á—ë—Ç—ã** ‚Äî –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –∏ –∑–∞–∫—É–ø–∫–∞–º\n\n"
        "üëá *–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:*",
        reply_markup=get_main_menu_kb(),
        parse_mode="Markdown"
    )
# –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä"
@router.callback_query(F.data == "stock_add")
async def start_add_product(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("üè∑Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(AddProductStates.name)

# –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
@router.message(AddProductStates.name)
async def get_product_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")
    await state.set_state(AddProductStates.quantity)

# –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
@router.message(AddProductStates.quantity)
async def get_product_quantity(message: Message, state: FSMContext):
    if not message.text.isdigit():
        return await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    await state.update_data(quantity=int(message.text))
    await message.answer("üí∏ –í–≤–µ–¥–∏—Ç–µ –∑–∞–∫—É–ø–æ—á–Ω—É—é —Ü–µ–Ω—É:")
    await state.set_state(AddProductStates.buy_price)

# –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫—É–ø–æ—á–Ω—É—é —Ü–µ–Ω—É
@router.message(AddProductStates.buy_price)
async def get_buy_price(message: Message, state: FSMContext):
    if not message.text.isdigit():
        return await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    await state.update_data(buy_price=int(message.text))
    await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏:")
    await state.set_state(AddProductStates.sell_price)

# –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
@router.message(AddProductStates.sell_price)
async def get_sell_price(message: Message, state: FSMContext):
    if not message.text.isdigit():
        return await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

    await state.update_data(sell_price=int(message.text))

    # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ"
    skip_button = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="skip_product_photo")]
    ])

    # –ï–¥–∏–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    await message.answer(
        "üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥:",
        reply_markup=skip_button
    )

    await state.set_state(AddProductStates.photo)

@router.message(AddProductStates.photo)
async def get_product_photo(message: Message, state: FSMContext):
    if not message.photo:
        return await message.answer("‚ùó –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞.")

    file_id = message.photo[-1].file_id
    await state.update_data(photo=file_id)
    await save_product_and_finish(message, state)
@router.callback_query(F.data == "skip_product_photo")
async def skip_photo(callback: CallbackQuery, state: FSMContext):
    await state.update_data(photo=None)
    await save_product_and_finish(callback.message, state)
@router.callback_query(F.data == "stock_view")
async def view_stock(callback: CallbackQuery):
    conn = get_db()
    cur = conn.cursor()
    cur.execute("SELECT name, quantity, buy_price, sell_price FROM products")
    products = cur.fetchall()
    conn.close()

    if not products:
        await callback.message.edit_text("üì¶ –ù–∞ —Å–∫–ª–∞–¥–µ –ø–æ–∫–∞ –ø—É—Å—Ç–æ.", reply_markup=get_stock_menu_kb())
        return

    text = "üìã <b>–û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ:</b>\n\n"
    for name, qty, buy, sell in products:
        profit_per_unit = sell - buy
        total_profit = profit_per_unit * qty
        text += (
            f"üì¶ <b>{name}</b>\n"
            f"‚Ä¢ –ö–æ–ª-–≤–æ: <b>{qty}</b>\n"
            f"‚Ä¢ –ó–∞–∫—É–ø: {buy} ‚ÇΩ | –ü—Ä–æ–¥–∞–∂–∞: {sell} ‚ÇΩ\n"
            f"‚Ä¢ –ü–æ—Ç–µ–Ω—Ü. –ø—Ä–∏–±—ã–ª—å: <b>{total_profit} ‚ÇΩ</b>\n\n"
        )

    await callback.message.edit_text(text, reply_markup=get_stock_menu_kb())


# –ù–∞—á–∞–ª–æ –ø—Ä–æ–¥–∞–∂–∏
@router.callback_query(F.data == "stock_sale")
async def start_sale(callback: CallbackQuery, state: FSMContext):
    conn = get_db()
    cur = conn.cursor()
    cur.execute("SELECT id, name FROM products")
    products = cur.fetchall()
    conn.close()

    if not products:
        await callback.message.edit_text("‚ùó –ù–∞ —Å–∫–ª–∞–¥–µ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏.", reply_markup=get_stock_menu_kb())
        return

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
                            [InlineKeyboardButton(text=name, callback_data=f"sell_{prod_id}")]
                            for prod_id, name in products
                        ] + [[InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_stock")]]
    )

    await callback.message.edit_text("üõí –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏:", reply_markup=kb)
    await state.set_state(SellProductStates.choosing_product)


# –í—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞
@router.callback_query(SellProductStates.choosing_product, F.data.startswith("sell_"))
async def choose_product(callback: CallbackQuery, state: FSMContext):
    prod_id = int(callback.data.split("_")[1])
    await state.update_data(product_id=prod_id)
    await callback.message.edit_text("üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü:")
    await state.set_state(SellProductStates.entering_quantity)


# –í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
@router.message(SellProductStates.entering_quantity)
async def process_sale_quantity(message: Message, state: FSMContext):
    if not message.text.isdigit():
        return await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

    qty = int(message.text)
    data = await state.get_data()
    product_id = data["product_id"]

    conn = get_db()
    cur = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –æ—Å—Ç–∞—Ç–∫–∞
    cur.execute("SELECT name, quantity FROM products WHERE id = ?", (product_id,))
    result = cur.fetchone()

    if not result:
        await message.answer("‚ùó –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    name, current_qty = result

    if qty > current_qty:
        await message.answer(f"‚ùó –ù–∞ —Å–∫–ª–∞–¥–µ —Ç–æ–ª—å–∫–æ {current_qty} —à—Ç. –£–∫–∞–∂–∏ –º–µ–Ω—å—à–µ.")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–∫–ª–∞–¥
    new_qty = current_qty - qty
    cur.execute("UPDATE products SET quantity = ? WHERE id = ?", (new_qty, product_id))

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–æ–¥–∞–∂—É
    cur.execute(
        "INSERT INTO sales (product_id, quantity, date) VALUES (?, ?, ?)",
        (product_id, qty, datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
    )

    conn.commit()
    conn.close()

    from keyboards.menu import get_main_menu_kb
    await message.answer(
        f"‚úÖ –ü—Ä–æ–¥–∞–∂–∞ <b>{name}</b> –Ω–∞ {qty} —à—Ç. –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞.",
        reply_markup=get_main_menu_kb()
    )
    await state.clear()

from states.product_states import PurchaseProductStates

# –ù–∞—á–∞–ª–æ –∑–∞–∫—É–ø–∫–∏
@router.callback_query(F.data == "stock_purchase")
async def start_purchase(callback: CallbackQuery, state: FSMContext):
    conn = get_db()
    cur = conn.cursor()
    cur.execute("SELECT id, name FROM products")
    products = cur.fetchall()
    conn.close()

    if not products:
        await callback.message.edit_text("‚ùó –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∑–∞–∫—É–ø–∫–∏.", reply_markup=get_stock_menu_kb())
        return

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=name, callback_data=f"purchase_{prod_id}")]
            for prod_id, name in products
        ] + [[InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_stock")]]
    )

    await callback.message.edit_text("üì• –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –∑–∞–∫—É–ø–∫–∏:", reply_markup=kb)
    await state.set_state(PurchaseProductStates.choosing_product)

# –í—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞
@router.callback_query(PurchaseProductStates.choosing_product, F.data.startswith("purchase_"))
async def choose_product_for_purchase(callback: CallbackQuery, state: FSMContext):
    prod_id = int(callback.data.split("_")[1])
    await state.update_data(product_id=prod_id)
    await callback.message.edit_text("üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –∑–∞–∫—É–ø–∫–∏:")
    await state.set_state(PurchaseProductStates.entering_quantity)

# –í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
@router.message(PurchaseProductStates.entering_quantity)
async def get_purchase_quantity(message: Message, state: FSMContext):
    if not message.text.isdigit():
        return await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    await state.update_data(quantity=int(message.text))
    await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –µ–¥–∏–Ω–∏—Ü—É:")
    await state.set_state(PurchaseProductStates.entering_price)

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫—É–ø–∫–∏
@router.message(PurchaseProductStates.entering_price)
async def complete_purchase(message: Message, state: FSMContext):
    if not message.text.isdigit():
        return await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    data = await state.update_data(price=int(message.text))
    data = await state.get_data()

    conn = get_db()
    cur = conn.cursor()

    cur.execute("SELECT name, quantity FROM products WHERE id = ?", (data["product_id"],))
    product = cur.fetchone()

    if not product:
        await message.answer("‚ùó –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    name, current_qty = product
    new_qty = current_qty + data["quantity"]

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Ü–µ–Ω—É –∑–∞–∫—É–ø–∫–∏
    cur.execute("UPDATE products SET quantity = ?, buy_price = ? WHERE id = ?",
                (new_qty, data["price"], data["product_id"]))

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞—Ç—É
    total_cost = data["quantity"] * data["price"]
    cur.execute(
        "INSERT INTO expenses (name, amount, date) VALUES (?, ?, ?)",
        (f"{name} (–∑–∞–∫—É–ø–∫–∞)", total_cost, datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
    )

    conn.commit()
    conn.close()

    from keyboards.menu import get_main_menu_kb
    await message.answer(
        f"üì• –ó–∞–∫—É–ø–∫–∞ <b>{name}</b> –Ω–∞ {data['quantity']} —à—Ç. –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n"
        f"üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: <b>{total_cost} ‚ÇΩ</b>",
        reply_markup=get_main_menu_kb()
    )
    await state.clear()

@router.callback_query(F.data == "stock_delete")
async def start_delete(callback: CallbackQuery):
    conn = get_db()
    cur = conn.cursor()
    cur.execute("SELECT id, name FROM products")
    products = cur.fetchall()
    conn.close()

    if not products:
        await callback.message.edit_text("‚ùó –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=get_stock_menu_kb())
        return

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"üóë {name}", callback_data=f"delete_{prod_id}")]
            for prod_id, name in products
        ] + [[InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_stock")]]
    )

    await callback.message.edit_text("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)

@router.callback_query(F.data.startswith("delete_product_"))
async def confirm_delete(callback: CallbackQuery):
    prod_id = int(callback.data.split("_")[1])

    conn = get_db()
    cur = conn.cursor()
    cur.execute("SELECT name FROM products WHERE id = ?", (prod_id,))
    product = cur.fetchone()

    if not product:
        await callback.message.edit_text("‚ùó –¢–æ–≤–∞—Ä —É–∂–µ —É–¥–∞–ª—ë–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_stock_menu_kb())
        return

    name = product[0]
    cur.execute("DELETE FROM products WHERE id = ?", (prod_id,))
    conn.commit()
    conn.close()

    await callback.message.edit_text(
        f"üóë –¢–æ–≤–∞—Ä <b>{name}</b> —É–¥–∞–ª—ë–Ω —Å–æ —Å–∫–ª–∞–¥–∞.",
        reply_markup=get_stock_menu_kb()
    )