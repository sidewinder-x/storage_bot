from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database import get_db
from config import config
from keyboards.menu import get_main_menu_kb, get_courier_menu_kb  # –¥–æ–±–∞–≤—å –∏–º–ø–æ—Ä—Ç
from aiogram.exceptions import TelegramBadRequest

router = Router()


# üì¶ –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
class OrderCreation(StatesGroup):
    choosing_product = State()
    entering_quantity = State()
    entering_price = State()


class OrderFinish(StatesGroup):
    waiting_payment_method = State()
    waiting_payout_amount = State()


# üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ‚Äî —Å—Ç–∞—Ä—Ç
@router.callback_query(F.data == "create_order")
async def start_order_creation(callback: CallbackQuery, state: FSMContext):
    conn = get_db()
    cur = conn.cursor()
    cur.execute("SELECT id, name FROM products WHERE quantity > 0")
    products = cur.fetchall()
    conn.close()

    if not products:
        await callback.message.edit_text("‚ùó –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞.")
        return

    buttons = [
        [InlineKeyboardButton(text=prod[1], callback_data=f"order_product_{prod[0]}")]
        for prod in products
    ]
    buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])

    await callback.message.edit_text("üõí –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –∑–∞–∫–∞–∑–∞:",
                                     reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
    await state.set_state(OrderCreation.choosing_product)


# ‚û°Ô∏è –ö–æ–ª-–≤–æ —Ç–æ–≤–∞—Ä–∞
@router.callback_query(F.data.startswith("order_product_"))
async def choose_quantity(callback: CallbackQuery, state: FSMContext):
    product_id = int(callback.data.split("_")[-1])
    await state.update_data(product_id=product_id)

    await callback.message.edit_text("üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞:")
    await state.set_state(OrderCreation.entering_quantity)


# ‚û°Ô∏è –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞
@router.message(OrderCreation.entering_quantity)
async def enter_price(message: Message, state: FSMContext):
    if not message.text.isdigit():
        return await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ.")

    quantity = int(message.text)
    if quantity < 1:
        return await message.answer("‚ùó –ú–∏–Ω–∏–º—É–º 1 —à—Ç.")

    await state.update_data(quantity=quantity)
    await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É (–µ—Å–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º ‚Äî –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ü–µ–Ω–∞ –∏–∑ —Ç–æ–≤–∞—Ä–∞):")
    await state.set_state(OrderCreation.entering_price)


# ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∏ —Ä–∞—Å—Å—ã–ª–∫–∞
@router.message(OrderCreation.entering_price)
async def finish_order(message: Message, state: FSMContext, bot):
    data = await state.get_data()
    price_input = message.text.strip()
    conn = get_db()
    cur = conn.cursor()

    if not price_input:
        cur.execute("SELECT sell_price FROM products WHERE id = ?", (data["product_id"],))
        price = cur.fetchone()[0]
    elif price_input.isdigit():
        price = int(price_input)
    else:
        return await message.answer("‚ùó –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç–æ–π.")

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑
    cur.execute(
        "INSERT INTO orders (product_id, quantity, price, created_at) VALUES (?, ?, ?, datetime('now'))",
        (data["product_id"], data["quantity"], price)
    )
    order_id = cur.lastrowid
    conn.commit()
    conn.close()

    await state.clear()

    # –†–∞—Å—Å—ã–ª–∞–µ–º –∫—É—Ä—å–µ—Ä–∞–º
    conn = get_db()
    cur = conn.cursor()
    cur.execute("SELECT name, photo FROM products WHERE id = ?", (data["product_id"],))
    product = cur.fetchone()
    product_name = product[0]
    product_photo = product[1]  # –º–æ–∂–µ—Ç –±—ã—Ç—å None
    cur.execute("SELECT id FROM users")
    couriers = cur.fetchall()
    conn.close()

    for courier_id in couriers:
        try:
            text = (
                f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}!\n"
                f"üõ† –¢–æ–≤–∞—Ä: {product_name}\n"
                f"üî¢ –ö–æ–ª-–≤–æ: {data['quantity']}\n"
                f"üí∞ –¶–µ–Ω–∞: {price} ‚ÇΩ"
            )

            if product_photo:
                await bot.send_photo(
                    courier_id[0],
                    photo=product_photo,
                    caption=text,
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑", callback_data=f"accept_order_{order_id}")]
                    ])
                )
            else:
                await bot.send_message(
                    courier_id[0],
                    text=text,
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑", callback_data=f"accept_order_{order_id}")]
                    ])
                )

        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –∫—É—Ä—å–µ—Ä—É {courier_id[0]}: {e}")

    await message.answer("‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—Å–µ–º –∫—É—Ä—å–µ—Ä–∞–º.")


# ‚úÖ –ö—É—Ä—å–µ—Ä –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞–∫–∞–∑
@router.callback_query(F.data.startswith("accept_order_"))
async def accept_order(callback: CallbackQuery):
    order_id = int(callback.data.split("_")[-1])
    courier_id = callback.from_user.id

    conn = get_db()
    cur = conn.cursor()
    cur.execute("SELECT status FROM orders WHERE id = ?", (order_id,))
    row = cur.fetchone()

    if not row or row[0] != 'waiting':
        await callback.answer("‚ùå –≠—Ç–æ—Ç –∑–∞–∫–∞–∑ —É–∂–µ –∑–∞–Ω—è—Ç –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", show_alert=True)
        return

    cur.execute("""
        UPDATE orders
        SET status = 'in_progress', assigned_to = ?
        WHERE id = ?
    """, (courier_id, order_id))
    conn.commit()

    cur.execute("SELECT name FROM users WHERE id = ?", (courier_id,))
    name = cur.fetchone()[0]
    conn.close()

    # –£–¥–∞–ª–∏–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç.–∫. –æ–Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å —Ñ–æ—Ç–æ –∏ –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–µ
    try:
        await callback.message.delete()
    except TelegramBadRequest as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    # –û—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ ‚Äî —á–∏—Å—Ç–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.answer(
        "‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–∫–∞–∑.\n\n–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üöö –ù–∞—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", callback_data="start_courier_work")]
        ])
    )

    await callback.message.bot.send_message(
        config.ADMIN_ID,
        f"üöö –ó–∞–∫–∞–∑ #{order_id} –ø—Ä–∏–Ω—è—Ç –∫—É—Ä—å–µ—Ä–æ–º <b>{name}</b>."
    )

@router.callback_query(F.data == "start_courier_work")
async def courier_starts_work(callback: CallbackQuery):
    try:
        await callback.message.delete()
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")


# üöö –ö—É—Ä—å–µ—Ä –∑–∞–≤–µ—Ä—à–∞–µ—Ç –∑–∞–∫–∞–∑ ‚Äî –≤—ã–±–∏—Ä–∞–µ—Ç —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
@router.callback_query(F.data.startswith("finish_order_"))
async def start_finish_order(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split("_")[-1])
    await state.update_data(order_id=order_id)

    await callback.message.edit_text(
        "üí∞ –ö–∞–∫ –±—ã–ª–∞ –ø–æ–ª—É—á–µ–Ω–∞ –æ–ø–ª–∞—Ç–∞?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –ö–∞—Ä—Ç–∞", callback_data="payment_card")],
            [InlineKeyboardButton(text="üíµ –ù–∞–ª–∏—á–Ω—ã–µ", callback_data="payment_cash")]
        ])
    )
    await state.set_state(OrderFinish.waiting_payment_method)


# üßæ –ö—É—Ä—å–µ—Ä –æ—Ç–ø—Ä–∞–≤–∏–ª –æ–ø–ª–∞—Ç—É ‚Üí —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
@router.callback_query(OrderFinish.waiting_payment_method, F.data.in_(["payment_card", "payment_cash"]))
async def confirm_finish_order(callback: CallbackQuery, state: FSMContext):
    method = "–ö–∞—Ä—Ç–∞" if callback.data == "payment_card" else "–ù–∞–ª–∏—á–Ω—ã–µ"
    data = await state.get_data()
    order_id = data["order_id"]
    courier_id = callback.from_user.id

    conn = get_db()
    cur = conn.cursor()
    cur.execute("UPDATE orders SET payment_method = ? WHERE id = ?", (method, order_id))
    conn.commit()
    conn.close()

    await state.clear()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é
    await callback.message.edit_text(
        "üìù –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –í –º–µ–Ω—é", callback_data="courier_menu")]
        ])
    )

    await callback.bot.send_message(
        config.ADMIN_ID,
        f"‚ö†Ô∏è –ö—É—Ä—å–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª –∑–∞–∫–∞–∑ #{order_id}\n–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: <b>{method}</b>\n\nüí∏ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–ø–ª–∞—Ç—É:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí∏ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É", callback_data=f"confirm_finish_{order_id}_{courier_id}")]
        ])
    )
# üí∏ –ê–¥–º–∏–Ω –≤–≤–æ–¥–∏—Ç —Å—É–º–º—É –≤—ã–ø–ª–∞—Ç—ã
@router.callback_query(F.data.startswith("confirm_finish_"))
async def ask_payout_amount(callback: CallbackQuery, state: FSMContext):
    parts = callback.data.split("_")
    order_id = int(parts[2])
    courier_id = int(parts[3])

    await state.update_data(order_id=order_id, courier_id=courier_id)
    await callback.message.answer(f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –≤—ã–ø–ª–∞—Ç–∏—Ç—å –∫—É—Ä—å–µ—Ä—É –∑–∞ –∑–∞–∫–∞–∑ #{order_id}:")
    await state.set_state(OrderFinish.waiting_payout_amount)


# ‚úÖ –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–ª–∞—Ç—É –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Å—ë
@router.message(OrderFinish.waiting_payout_amount)
async def process_payout(message: Message, state: FSMContext):
    if not message.text.strip().isdigit():
        return await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–∏—Å–ª–æ–º.")

    payout = int(message.text.strip())
    data = await state.get_data()
    order_id = data["order_id"]
    courier_id = data["courier_id"]

    conn = get_db()
    cur = conn.cursor()

    # 1. –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ –∑–∞–∫–∞–∑–∞
    cur.execute("SELECT product_id, quantity FROM orders WHERE id = ?", (order_id,))
    product_id, qty_sold = cur.fetchone()

    # 2. –°–Ω–∏–∂–∞–µ–º –æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ
    cur.execute("SELECT quantity FROM products WHERE id = ?", (product_id,))
    current_qty = cur.fetchone()[0]
    new_qty = max(current_qty - qty_sold, 0)
    cur.execute("UPDATE products SET quantity = ? WHERE id = ?", (new_qty, product_id))

    # 3. –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–∫–∞–∑
    cur.execute("""
        UPDATE orders
        SET status = 'completed',
            payout = ?,
            paid_to_courier = 1,
            finished_at = datetime('now')
        WHERE id = ?
    """, (payout, order_id))

    # 4. –ü–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å –∫—É—Ä—å–µ—Ä—É
    cur.execute("UPDATE users SET balance = balance + ? WHERE id = ?", (payout, courier_id))

    # 5. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞—Ç—É
    cur.execute("""
        INSERT INTO expenses (name, amount, date)
        VALUES (?, ?, datetime('now'))
    """, (f"–í—ã–ø–ª–∞—Ç–∞ –∫—É—Ä—å–µ—Ä—É #{courier_id} –∑–∞ –∑–∞–∫–∞–∑ #{order_id}", payout))

    conn.commit()
    conn.close()
    await state.clear()

    await message.answer("‚úÖ –í—ã–ø–ª–∞—Ç–∞ –∫—É—Ä—å–µ—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.\n–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –∏ –∑–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à—ë–Ω.")

    try:
        await message.bot.send_message(
            courier_id,
            f"‚úÖ –í—ã–ø–ª–∞—Ç–∞ –∑–∞ –∑–∞–∫–∞–∑ #{order_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.\nüí∞ –ù–∞—á–∏—Å–ª–µ–Ω–æ: {payout} ‚ÇΩ",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üëç –û—Ç–ª–∏—á–Ω–æ", callback_data="dismiss_message")]
            ])
        )
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫—É—Ä—å–µ—Ä—É: {e}")


@router.callback_query(F.data == "dismiss_message")
async def dismiss_temp_message(callback: CallbackQuery):
    try:
        await callback.message.delete()
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")