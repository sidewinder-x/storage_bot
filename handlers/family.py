from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from database import get_db
from config import config
from keyboards.menu import get_main_menu_kb, get_courier_menu_kb  # –¥–æ–±–∞–≤—å –∏–º–ø–æ—Ä—Ç
from aiogram import Bot
from aiogram.exceptions import TelegramBadRequest
from keyboards.menu import get_my_orders_kb
from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramBadRequest
from database import get_db
router = Router()


# üì¶ –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫—É—Ä—å–µ—Ä–∞
class RegisterCourier(StatesGroup):
    waiting_for_name = State()


@router.callback_query(F.data.startswith("delete_courier_"))
async def delete_courier(callback: CallbackQuery, bot: Bot):
    courier_id = int(callback.data.split("_")[-1])
    print(f"üöÆ –ö—É—Ä—å–µ—Ä –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ: {courier_id}")

    conn = get_db()
    cur = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä–∏–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫—É—Ä—å–µ—Ä
    cur.execute("SELECT name FROM users WHERE id = ?", (courier_id,))
    user = cur.fetchone()

    if not user:
        await callback.answer("‚ùó –ö—É—Ä—å–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    name = user[0]

    # –£–¥–∞–ª—è–µ–º
    cur.execute("DELETE FROM users WHERE id = ?", (courier_id,))
    conn.commit()
    print(f"‚úÖ –ö—É—Ä—å–µ—Ä {name} —É–¥–∞–ª—ë–Ω")

    # –ü—Ä–æ–±—É–µ–º —É–≤–µ–¥–æ–º–∏—Ç—å –∫—É—Ä—å–µ—Ä–∞
    try:
        await bot.send_message(courier_id, "‚ùå –í—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∫–∞–∫ –∫—É—Ä—å–µ—Ä.")
    except TelegramBadRequest as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫—É—Ä—å–µ—Ä—É {courier_id}: {e}")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
    cur.execute("SELECT id, name, balance FROM users")
    users = cur.fetchall()
    conn.close()

    if not users:
        await callback.message.edit_text("üöö –ö—É—Ä—å–µ—Ä—ã —É–¥–∞–ª–µ–Ω—ã. –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
        return

    text = "<b>üöö –°–ø–∏—Å–æ–∫ –∫—É—Ä—å–µ—Ä–æ–≤:</b>\n\n"
    buttons = []

    for user_id, name, balance in users:
        text += f"üë§ <b>{name}</b> | –ë–∞–ª–∞–Ω—Å: {balance} ‚ÇΩ\n"
        buttons.append([InlineKeyboardButton(
            text=f"üóë –£–¥–∞–ª–∏—Ç—å {name}",
            callback_data=f"delete_courier_{user_id}"
        )])

    buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])

    await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
# üß† /start ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞ –∏–ª–∏ –∫—É—Ä—å–µ—Ä–∞
@router.message(F.text == "/start")
async def check_user_start(message: Message):

    user_id = message.from_user.id

    print(f"üõ†Ô∏è –ó–∞–ø—É—â–µ–Ω /start –æ—Ç user_id = {user_id}, admin = {config.ADMIN_ID}")  # DEBUG

    if user_id == config.ADMIN_ID:
        await message.answer(
            "*ü§ñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è!\n\n"
            "üì¶ **–£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–∫–ª–∞–¥–æ–º**\n"
            "üí∞ **–°–ª–µ–¥–∏—Ç–µ –∑–∞ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏**\n"
            "üöö **–ù–∞–∑–Ω–∞—á–∞–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è –∫—É—Ä—å–µ—Ä–∞–º**\n"
            "üìä **–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –≤—ã—Ä—É—á–∫—É –∏ –ø—Ä–∏–±—ã–ª—å**\n\n"
            "üëá *–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:*",
            reply_markup=get_main_menu_kb(),
            parse_mode="Markdown"
        )
        return

    # –ö—É—Ä—å–µ—Ä
    conn = get_db()
    cur = conn.cursor()
    cur.execute("SELECT name FROM users WHERE id = ?", (user_id,))
    user = cur.fetchone()
    conn.close()

    if user:
        await message.answer(
            f"üëã –ü—Ä–∏–≤–µ—Ç, <b>{user[0]}</b>!\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫—É—Ä—å–µ—Ä—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.",
            reply_markup=get_courier_menu_kb()
        )
    else:
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –∫—É—Ä—å–µ—Ä.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data="register_courier")]
            ])
        )


# üîπ –ö—É—Ä—å–µ—Ä –Ω–∞–∂–∞–ª "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"
@router.callback_query(F.data == "register_courier")
async def ask_name(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:")
    await state.set_state(RegisterCourier.waiting_for_name)


# üîπ –ö—É—Ä—å–µ—Ä –≤–≤–æ–¥–∏—Ç –∏–º—è ‚Üí —Å–æ—Ö—Ä–∞–Ω—è–µ–º

@router.message(RegisterCourier.waiting_for_name)
async def save_courier_name(message: Message, state: FSMContext):
    name = message.text.strip()
    user_id = message.from_user.id

    if len(name) < 2:
        return await message.answer("‚ùó –ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º –∏–∑ 2 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")

    conn = get_db()
    cur = conn.cursor()
    cur.execute("INSERT OR REPLACE INTO users (id, name, balance) VALUES (?, ?, ?)", (user_id, name, 0))
    conn.commit()
    conn.close()

    await message.answer(
        f"‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ <b>{name}</b>!",
        reply_markup=get_courier_menu_kb()  # üéØ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ä–∞–∑—É –ü–û–õ–ù–û–ï –º–µ–Ω—é
    )
    await state.clear()


@router.callback_query(F.data == "my_orders")
async def show_courier_orders(callback: CallbackQuery):
    courier_id = callback.from_user.id
    conn = get_db()
    cur = conn.cursor()

    cur.execute("SELECT id, product_id, quantity, status FROM orders WHERE assigned_to = ?", (courier_id,))
    orders = cur.fetchall()
    conn.close()

    if not orders:
        await callback.message.edit_text(
            "üì¶ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="my_orders_menu")]
            ])
        )
        return

    text = "<b>üßæ –ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤:</b>\n\n"
    buttons = []

    for order in orders:
        oid, pid, qty, status = order
        text += f"üì¶ –ó–∞–∫–∞–∑ #{oid} | –¢–æ–≤–∞—Ä ID: {pid} | –ö–æ–ª-–≤–æ: {qty} | –°—Ç–∞—Ç—É—Å: {status}\n"

    buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="my_orders_menu")])

    await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
@router.callback_query(F.data == "admin_couriers")
async def show_couriers(callback: CallbackQuery):
    conn = get_db()
    cur = conn.cursor()
    cur.execute("SELECT id, name, balance FROM users")
    users = cur.fetchall()
    conn.close()

    if not users:
        await callback.message.edit_text("‚ùó –ö—É—Ä—å–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    text = "<b>üöö –°–ø–∏—Å–æ–∫ –∫—É—Ä—å–µ—Ä–æ–≤:</b>\n\n"
    buttons = []

    for user_id, name, balance in users:
        text += f"üë§ <b>{name}</b> | –ë–∞–ª–∞–Ω—Å: {balance} ‚ÇΩ\n"
        buttons.append([InlineKeyboardButton(text=f"üóë –£–¥–∞–ª–∏—Ç—å {name}", callback_data=f"delete_courier_{user_id}")])

    buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])

    await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))


@router.callback_query(F.data == "my_orders_menu")
async def show_my_orders_menu(callback: CallbackQuery):
    await callback.message.edit_text(
        "<b>üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã:</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å:",
        reply_markup=get_my_orders_kb()
    )

@router.callback_query(F.data == "courier_menu")
async def back_to_courier_menu(callback: CallbackQuery):
    user_id = callback.from_user.id

    conn = get_db()
    cur = conn.cursor()
    cur.execute("SELECT name FROM users WHERE id = ?", (user_id,))
    user = cur.fetchone()
    conn.close()

    if user:
        await callback.message.edit_text(
            f"üëã –ü—Ä–∏–≤–µ—Ç, <b>{user[0]}</b>!\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫—É—Ä—å–µ—Ä—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.",
            reply_markup=get_courier_menu_kb(),
            parse_mode="HTML"
        )
    else:
        await callback.message.edit_text(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –∫—É—Ä—å–µ—Ä.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data="register_courier")]
            ])
        )
@router.callback_query(F.data == "current_orders")
async def show_current_orders(callback: CallbackQuery):
    courier_id = callback.from_user.id
    conn = get_db()
    cur = conn.cursor()

    cur.execute("""
        SELECT o.id, p.name, o.quantity, o.price
        FROM orders o
        JOIN products p ON o.product_id = p.id
        WHERE o.assigned_to = ? AND o.status = 'in_progress'
    """, (courier_id,))
    orders = cur.fetchall()
    conn.close()

    if not orders:
        await callback.message.edit_text(
            "üì¨ –£ –≤–∞—Å –Ω–µ—Ç —Ç–µ–∫—É—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="my_orders_menu")]
            ])
        )
        return

    text = "<b>üì¨ –í–∞—à —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑:</b>\n\n"
    buttons = []

    for order_id, product_name, qty, price in orders:
        text += f"üì¶ –ó–∞–∫–∞–∑ #{order_id}\nüõ† –¢–æ–≤–∞—Ä: {product_name}\nüî¢ –ö–æ–ª-–≤–æ: {qty}\nüí∞ –¶–µ–Ω–∞: {price} ‚ÇΩ\n\n"
        buttons.append([
            InlineKeyboardButton(text=f"‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑ #{order_id}", callback_data=f"finish_order_{order_id}")
        ])

    buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="my_orders_menu")])

    await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))

@router.callback_query(F.data == "courier_balance")
async def show_courier_balance(callback: CallbackQuery):
    courier_id = callback.from_user.id

    conn = get_db()
    cur = conn.cursor()
    cur.execute("SELECT balance, name FROM users WHERE id = ?", (courier_id,))
    row = cur.fetchone()
    conn.close()

    if not row:
        await callback.message.edit_text("‚ùó –ö—É—Ä—å–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    balance, name = row

    text = f"<b>üí∏ –ë–∞–ª–∞–Ω—Å –∫—É—Ä—å–µ—Ä–∞ {name}:</b>\n\n"
    text += f"üìä –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{balance} ‚ÇΩ</b>\n\n"
    text += "üëá –ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤—ã–ø–ª–∞—Ç:"

    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üßæ –ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–ª–∞—Ç", callback_data="courier_payouts_history")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="courier_menu")]
        ]),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "courier_payouts_history")
async def show_payout_history(callback: CallbackQuery):
    courier_id = callback.from_user.id

    conn = get_db()
    cur = conn.cursor()
    cur.execute("""
        SELECT amount, date FROM expenses
        WHERE name LIKE ?
        ORDER BY date DESC
        LIMIT 10
    """, (f"%–∫—É—Ä—å–µ—Ä—É #{courier_id}%",))
    payouts = cur.fetchall()
    conn.close()

    text = "<b>üßæ –ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–ª–∞—Ç:</b>\n\n"

    if payouts:
        for amount, date in payouts:
            text += f"‚úÖ +{amount} ‚ÇΩ ‚Äî {date}\n"
    else:
        text += "‚Äî –ø–æ–∫–∞ –Ω–µ—Ç –≤—ã–ø–ª–∞—Ç.\n"

    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="courier_balance")]
        ]),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "courier_stock")
async def show_courier_stock(callback: CallbackQuery):
    conn = get_db()
    cur = conn.cursor()
    cur.execute("SELECT name, quantity FROM products WHERE quantity > 0")
    products = cur.fetchall()
    conn.close()

    if not products:
        text = "üì¶ –°–∫–ª–∞–¥ –ø—É—Å—Ç."
    else:
        text = "<b>üì¶ –°–∫–ª–∞–¥ ‚Äî –≤ –Ω–∞–ª–∏—á–∏–∏:</b>\n\n"
        for name, qty in products:
            text += f"üîπ {name} ‚Äî <b>{qty} —à—Ç.</b>\n"

    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="courier_menu")]
        ]),
        parse_mode="HTML"
    )