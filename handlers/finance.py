from database import get_db
from keyboards.finance_kb import get_finance_menu_kb
from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from states.finance_states import AddExpenseStates
from datetime import datetime
router = Router()
@router.callback_query(F.data == "finance_profit")
async def show_profit(callback: CallbackQuery):
    conn = get_db()
    cur = conn.cursor()

    cur.execute("""
    SELECT 
        s.quantity, 
        p.sell_price, 
        p.buy_price
    FROM sales s
    JOIN products p ON s.product_id = p.id
    """)
    rows = cur.fetchall()
    conn.close()

    total_revenue = 0
    total_cost = 0

    for qty, sell_price, buy_price in rows:
        total_revenue += qty * sell_price
        total_cost += qty * buy_price

    profit = total_revenue - total_cost

    text = (
        f"üìà <b>–í—ã—Ä—É—á–∫–∞ –∏ –ø—Ä–∏–±—ã–ª—å</b>\n\n"
        f"üíµ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: <b>{total_revenue} ‚ÇΩ</b>\n"
        f"üì¶ –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: <b>{total_cost} ‚ÇΩ</b>\n"
        f"üí∞ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: <b>{profit} ‚ÇΩ</b>"
    )

    await callback.message.edit_text(text, reply_markup=get_finance_menu_kb())

@router.callback_query(F.data == "menu_finance")
async def open_finance(callback: CallbackQuery):
    await callback.message.edit_text(
        "üí∏ *–§–∏–Ω–∞–Ω—Å—ã –∏ –ø—Ä–∏–±—ã–ª—å:*\n\n –°–ª–µ–¥–∏ –∑–∞ —Å–≤–æ–∏–º–∏ –¥–æ—Ö–æ–¥–∞–º–∏ –∏ —Ä–∞—Å—Ö–æ–¥–∞–º–∏ –≤ —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ:",
        reply_markup=get_finance_menu_kb(),
        parse_mode = "Markdown"
    )


@router.callback_query(F.data == "finance_add_expense")
async def start_add_expense(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–∞—Ç—ã:")
    await state.set_state(AddExpenseStates.name)


@router.message(AddExpenseStates.name)
async def get_expense_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ç—Ä–∞—Ç—ã:")
    await state.set_state(AddExpenseStates.amount)


@router.message(AddExpenseStates.amount)
async def get_expense_amount(message: Message, state: FSMContext):
    if not message.text.isdigit():
        return await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

    data = await state.get_data()
    name = data["name"]
    amount = int(message.text)

    conn = get_db()
    cur = conn.cursor()
    cur.execute(
        "INSERT INTO expenses (name, amount, date) VALUES (?, ?, ?)",
        (name, amount, datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
    )
    conn.commit()
    conn.close()

    await message.answer(
        f"‚úÖ –¢—Ä–∞—Ç–∞ <b>{name}</b> –Ω–∞ <b>{amount} ‚ÇΩ</b> –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
        reply_markup=get_finance_menu_kb()
    )
    await state.clear()

@router.callback_query(F.data == "finance_expenses")
async def show_expenses(callback: CallbackQuery):
    conn = get_db()
    cur = conn.cursor()
    cur.execute("SELECT name, amount, date FROM expenses ORDER BY date DESC")
    expenses = cur.fetchall()
    conn.close()

    if not expenses:
        await callback.message.edit_text(
            "üìâ –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤.",
            reply_markup=get_finance_menu_kb()
        )
        return

    text = "<b>üìâ –í—Å–µ —Ä–∞—Å—Ö–æ–¥—ã:</b>\n\n"
    total = 0

    for name, amount, date in expenses:
        total += amount
        text += f"‚Ä¢ <b>{name}</b> ‚Äî {amount} ‚ÇΩ ({date})\n"

    text += f"\nüí∏ <b>–í—Å–µ–≥–æ —Ä–∞—Å—Ö–æ–¥–æ–≤:</b> {total} ‚ÇΩ"

    await callback.message.edit_text(text, reply_markup=get_finance_menu_kb())

@router.callback_query(F.data == "finance_balance")
async def show_balance(callback: CallbackQuery):
    conn = get_db()
    cur = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º
    cur.execute("""
    SELECT s.quantity, p.sell_price, p.buy_price
    FROM sales s
    JOIN products p ON s.product_id = p.id
    """)
    sales = cur.fetchall()

    total_revenue = 0
    total_cost = 0

    for qty, sell_price, buy_price in sales:
        total_revenue += qty * sell_price
        total_cost += qty * buy_price

    # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –≤—Å–µ—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤
    cur.execute("SELECT SUM(amount) FROM expenses")
    expenses_total = cur.fetchone()[0] or 0

    conn.close()

    profit = total_revenue - total_cost
    balance = profit - expenses_total

    text = (
        f"üßÆ <b>–ë–∞–ª–∞–Ω—Å:</b>\n\n"
        f"üíµ –í—ã—Ä—É—á–∫–∞: {total_revenue} ‚ÇΩ\n"
        f"üì¶ –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_cost} ‚ÇΩ\n"
        f"üí∞ –ü—Ä–∏–±—ã–ª—å: {profit} ‚ÇΩ\n"
        f"üìâ –†–∞—Å—Ö–æ–¥—ã: {expenses_total} ‚ÇΩ\n\n"
        f"üíé <b>–ß–∏—Å—Ç—ã–π –±–∞–ª–∞–Ω—Å:</b> {balance} ‚ÇΩ"
    )

    await callback.message.edit_text(text, reply_markup=get_finance_menu_kb())